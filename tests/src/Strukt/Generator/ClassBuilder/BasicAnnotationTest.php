<?php

use Strukt\Generator\Annotation\Basic as BasicNotes;

class BasicAnnotationTest extends PHPUnit\Framework\TestCase{

	public function setUp():void{

		//
	}

	public function test(){

		$class = array(

			"declaration"=>array(

				"namespace"=>"Payroll\AuthModule\Router",
				"name"=>"Index",
				"extends"=>"AbstractRouter",
				"use"=>array(

					"Psr\Http\Message\RequestInterface",
					"Psr\Http\Message\ResponseInterface",
					"Contract\Router as AbstractRouter"
				)
			),
			"properties"=>array(

				array(

					"access"=>"private",
					"scope"=>"static",
					"name"=>"name",
					"value"=>"\"Payroll\AuthModule\Router\Index\""
				),
				array(

					"name"=>"autoGenerated",
					 "value"=>"true"
				)
			),
			"methods"=>array(

				array(

					"name"=>"welcome", 
					"params"=>null,
					"body"=>"//",
					"annotations"=>array(

						"Route"=>"/",
						"Method"=>array(

							"GET", 
							"POST"
						),
						"Provides"=>"application/json",
						"Middleware"=>array("AuthToken", "GVerify")
					)
				),
				array(

					"name"=>"hello", 
					"params"=>array("to"), 
					"body"=>"//",
					"annotations"=>array(

						"Route"=>"/hello/{to:alpha}",
						"Method"=>array(

							"GET", 
							"POST"
						),
						"Provides"=>"application/html",
						"Middlewares"=>array("A", "B","C")
					)
				),
				array(

					"name"=>"login", 
					"params"=>array(

						"username", 
						"password"
					),
					"body"=>"//",
					"annotations"=>array(
						
						"Route"=>"/login",
						"Method"=>"GET",
						"Secure"=>array(

							"username"=>"admin",
							"password"=>"p@55w0rd"
						),
						"Expects"=>array(

							"username",
							"password"
						)
					)
				)
			)
		);

		$builder = new \Strukt\Generator\ClassBuilder($class["declaration"]);

		foreach($class["properties"] as $property)
			$builder->addProperty($property);

		foreach($class["methods"] as $method)
			$builder->addMethod($method, new BasicNotes($method["annotations"]));

		$ns = sprintf(sprintf("%s\%s", $class["declaration"]["namespace"], 
										$class["declaration"]["name"]));

		$fixture = Strukt\Fs::cat(sprintf("fixtures/app/src/%s.php", 
											str_replace("\\", "/", $ns)));

		$result = sprintf("<?php\n%s", (string)$builder);
		$replace = "@Middleware(AuthToken)\n\t* @Middleware(GVerify)";
		$result = str_replace("@Middleware(AuthToken, GVerify)", $replace, $result);
		
		$this->assertEquals($result, str_replace("\r", "", $fixture));
	}
}